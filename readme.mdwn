Open Source GPS RF Front-end Board
==================================

Current status: March 2014 - Ready to order v2 board and parts 

Author: Jenner Hanni <wicker>
Institution: Portland State University (http://www.pdx.edu/) and the Portland State Aerospace Society (http://psas.pdx.edu/)
License: BSD "3 clause" license.

## What

This is an GPS "RF front-end" board. It uses the MAX2769 GPS RF front-end that down-converts and then samples the GPS signals on 1.57542 GHz, and then sends that sampled stream to an STM32F407 microcontroller. The STM32 can then write the GPS raw data stream to a microSD card or out via 100 Mbps Ethernet.

## Why

Several GPS receiver boards exist on the market to receive GPS satellite signals and process it to provide location data but these GPS receivers only give the final location. Getting access to the raw data before they go into correlators means you have to purchase a “RF front end” for hundreds of dollars, at which point you can work on projects like building an FPGA receiver board or developing a software radio receiver. 

Both of these projects are in-progress projects at Portland State, and are stalled on purchasing the very expensive RF front end. This project proposes to design, build, and release an open-source GPS receiver RF front-end board that would offer the GPS raw data over USB and serial outputs. Open source GPS receiver boards do exist, including in Andrew Greenberg’s GPL-GPS Master’s thesis, but all are based on very out dated and out-of-production GPS chipsets and are not easily acquired. 

Cost is also a factor: commercial RF front end boards are hundreds to thousands of dollars. And while the proposed chip for this project, the MAX2769 Universal GPS Receiver, costs only $5, the development kit is $600 -- in other words, cost prohibitive for a small project and frustrating for embedded software developers who may not have the time or experience to design and build their own hardware.

## Other

- Boards are designed in EAGLE 6.5 and are fabricated using OSH Park's 4 layer service.
- Thank you to Swift-Nav for providing an open source reference design for the MAX2769. Many of the ideas and components of this board borrowed heavily on the Piksi.
- BOM available at <https://docs.google.com/spreadsheet/ccc?key=0Aj2ugLxWTS6bdDNQeDJjXzUxYTRNRFFiaVJvZ1Nmanc&usp=sharing>

TODO
====

- Finish move to end-fire connector (move around RF components, better layout somehow?)
- Verify MAX xtal package/part #
- Verify STM xtal package/part #
- BOM


Components
==========

### D1 -- 20V 0.5A Schottky diode in a 0603 -- Comchip CDBU0520 (DK 641-1332-1-ND)

Surprisingly, this is the highest voltage and current rated diode in an 0603, which is uncomfortably close to it's actual rating. On the other hand, this is used during debugging only, so we don't care.


------------------------------------------------------------


### L1, L4 --- Ethernet common mode choke, 90 ohms, 400 mA -- TDK ACM2012-900-2P-T002 (DK 445-2207-1-ND)

Very, very small ethernet magnetics. Pioneered for the rocketnet hub.

### L2 -- 6.2 nH in 0402

TODO: Not sure the specs here: 0402 6.3 nH.... and? Random guess: TDK MLG1005S6N2ST000 (DK 445-3054-1-ND)


### L5 -- 9.1 nH  in 0402


TODO: Not sure the specs here: 0402 6.3 nH.... and? Random guess: TDK MLG1005S9N1JT000 (DK 445-3058-1-ND)


### L3 -- PHY ferrite bead , 30 mohm, 1.5 A in an 0805 -- TDK HF70ACC201209-T (DK 445-6183-1-ND)

For filtering out the PHY's internal 3 V supply. Chosen base off of the old Olimex PHY chip having


### L6, L8 -- 1.57542 GHz SAW Filters -- Kyocera SF14-1575F5UU19 (DK 478-5246-1-ND)

We need to balance insertion loss with off-GPS-band attenuation. There are lots of very low insertion loss SAW filters, but they have weeny attenuation, especially at 2.4 GHz where we'll be nuking everything with our DxWiFi system (1W 802.11b @ 2.422 GHz using BPSK). So we chose this one, with a higher 1.2 dB max insertion loss, but 40 dB attention around 2.4 GHz. L8 between LNAOUT and MIXIN on the MAX2769: certainly the right place for a SAW filter. L6 before any LNA: Not so sure! However, we've experienced swamping out LNAs with our 2.4 GHz radiation, so it's probably waise to add a SAW filter even before our first LNA.


------------------------------------------------------------


### J2 -- End-fire SMA connector -- Emerson 142-0701-801 (DK J502-ND)

We could go for a u.fl but they're obnoxiously small and don't lock, and an end-fire SMA doesn't take much vertical height.


### JP3 -- External COTS GPS Receiver + FTDI Cable connector

This is a double use header. First and foremost, it's a cable that connects to our COTS GPS board (the Hemisphere Crescent module), grabs the binary data it's spewing (as programmed in it's flash settings), packetizing it, and sending it off via Ethernet to the FC. This essentially makes the STM32 a UART to Ethernet converter, which is fine, that should be easy and fast with DMA and whatnot. But, we also have to power the Crescent board with 3.3V So I put the switching 3.3V supply on pin 2 of the 6 pin header.

The second use is that this just happens to be the correct pinout for a 3.3V FTDI cable. 3.3V FROM the FTDI is sent to a test point and will NOT run the board (that would be weird), and the 3.3V from the SPS goes to the RTS# line, which is an input for the FTDI. Thus, nothing should blow up no matter what is powered when.


### J4 -- Debugging MicroUSB connector -- Hirose ZX62D-B-5PA8 (AKA ZX62D-B-5P8) (DK H11610CT-ND)

This allows the ChibiOS monitor to run on the full speed USB peripheral. Bonus points: it also should power the whole board because of D2 and the fact that LMZ is pretty low drop out. So yay, you can program and debug without a high voltage power supply, which is exactly what we want.


-------------------------------------


### LED1 -- Green LED in 0603 package -- Kingbright APT1608CGCK	(DK 754-1116-1-ND)

Power LED.


### LED2, LED4, LED5 -- Yellow LEDs in a 0603 package -- Kingbright APT1608SYCK (DK 754-1124-1-ND)

Just standard debugging LEDs, nothing special.


### LED3G -- RGB LED in a PLCC-6 -- OSRAM LRTB G6TG-TU7+VV7+ST7-IB (DK 475-1319-1-ND)

Standard PSAS RGB LED just because we have to.


-------------------------------------


### Q1 -- MOSFET P-CH 20V 1.8A SOT-23 -- ON NTR4101P (DK NTR4101PT1GOSCT-ND)

Standard, in-house P-channel power switch


-------------------------------------

### T1, T2 -- Ethernet pulse transformers -- TDK ALT4532-201-T001 (DK 445-8639-1-ND)

Smallest pulse transformers, evar. Pioneered on the rocketnet hub.


-------------------------------------

### U1 -- GPS receiver front end IC -- Maxim MAX2769BETI/V+ (DK MAX2769BETI/V+-ND)

The whole reason we made this board!


### U2 -- ARM CORTEX-M4 microcontroller in a 100LQFP -- STMicro STM32F407VET6 (DK 497-12075-ND)

Same as in the rocketnet hub, but we're using a different symbol. It's the coolest uC on the block.


### U3 -- Micrel KSZ8081???RNA -- TODO PART NUMBER

Best PHY chip ever. We'll soon learn why it sucks.


### U4 -- 16.368 MHz ±0.5ppm TCXO - TXC 7Q-16.368MBG-T (DK 887-1548-1-ND)

Main sampling clock for the MAX2769. Dude, check out the ppm. Shamelessly copied from the Piksi.


### U5 -- 1.5 GHz LNA -- Torex Semiconductor XC2401A8167R-G (DK 893-1155-1-ND)

This part we shamelessly borrowed from the Piksi. It seems like a very nice part: noise figure ~ 0.69 dB, and has a gain of 15 dB. It takes Vdd = 1.26 V, so we need to put in a resistor for bias; at 2.85 V (hey, it has that in the datasheet, so other people do this?) it's 470 ohms. The cap stays at 10 nF.  /capacitor bias network as per the datasheet. Ahhhh, cargo cult black magic. They claim they want the TDK GLQ1005 type of inductor for the 9.1 and 6.2 nH inductors.

TODO: Idd = (,4.25,5.50) mA max; can the MAX2769 source that from ANTBIAS?


### U6, U7 -- 2.85 V LDO in a SC-70 -- Maxim MAX8510EXK29+T (MSR 700-MAX8510EXK29T)

Drop the 3.3V digital down to 2.85 V in order to filter out noise.

### U8	-- 20V input 1A buck monolithic voltage regulator --  TI LMZ12001TZ-ADJ/NOPB (DK LMZ12001TZ-ADJ/NOPBCT-ND)

Laziest power designers in the world. Takes 4.5 V (USB) to 20 V (rocket shore power), switches and inductors built in, Should Just Work(tm). Outputs 3.3V for digital stuff.


--------------------------------------------------

### X1 -- 25 MHz +/- 10 ppm 2.0x3.5mm 10pF crystal -- TXC 8Y-25.000MEEQ-T (DK 887-1819-1-ND)

25 MHz xtal on the STM32 so that we can send it out MCO1 and run the Ethernet PHY from a single xtal. The PHY chip then PLLs the 25 MHz to 50 MHz for the REF_CLOCK. This should not get in the way of running USB (or anything else, like UARTs) since the STM can divide this down to 1 MHz and then PLL it up to 48 MHz for USB and whatever (168 MHz?) for the SYSCLOCK. We want < 50 ppm, this one nails it at 10 ppm. It was used by the rocketnet hub, so might as well re-use it.








